/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package streamd14;

import java.util.*;
import java.util.stream.Collectors;
import java.util.stream.IntStream;

import static java.util.stream.Collectors.*;

public class App {
    public String getGreeting() {
        return "Hello World!";
    }

    public static void main(String[] args)
    {
      Java401Person ed = new Java401Person("Ed", 34, "Writing", true);
      Java401Person alex = new Java401Person("Alex", 8, "Blacksmithing", true);
      Java401Person tony = new Java401Person("Tony", 2, "Gaming", true);
      Java401Person josh = new Java401Person("Josh", 1, "Snowboarding", false);
      Java401Person jallow = new Java401Person("Jallow", 1, "Soccer", true);
      Java401Person kevin = new Java401Person("Kevin", 0, "Linguistics", true);
      Java401Person ben = new Java401Person("Ben", 3, "Gaming", true);
      Java401Person jb = new Java401Person("JB", 25, "Karaoke", false);
      Java401Person robb = new Java401Person("Robb", 0, "Guitar", false);
      Java401Person shane = new Java401Person("Shane", 0, "Drawing", false);

      List<Java401Person> classmates = new ArrayList<>();
      classmates.add(ed);
      classmates.add(alex);
      classmates.add(tony);
      classmates.add(josh);
      classmates.add(jallow);
      classmates.add(kevin);
      classmates.add(ben);
      classmates.add(jb);
      classmates.add(robb);
      classmates.add(shane);

      // Test Case 1
      // Print the first 10 positive integral numbers

      // Imperative way:

      for (int i = 1; i <= 10; i++)
      {
        System.out.println(i);
      }

      // Functional way:

      // boxed() converts int to Integer
      // Start with source operation, do any number of intermediate operations, and end with terminal operation
      // Source: IntStream.range()
      // Intermediate: boxed()
      // Terminal: collect()
      List<Integer> testCase1Ints = IntStream.range(1, 11).boxed().collect(toList());
      for (Integer testCase1Int : testCase1Ints)
      {
        System.out.println(testCase1Int);
      }

      // Test Case 2 I(mperative)
      // Print the last 5 numbers from 1-10

      for (int i = 1; i <= 10; i++)
      {
        if (i > 5)
          System.out.println(i);
      }

      // Test Case 2 F(unctional)
      // Uses skip()

      List<Integer> testCase2Ints = IntStream.range(1, 11).boxed().skip(5).collect(toList());
      for (Integer testCase2Int : testCase2Ints)
      {
        System.out.println(testCase2Int);
      }

      // Test Case 3 I
      // Print the first 5 numbers from 1-10

      for (int i = 1; i <= 10; i++)
      {
        if (i <= 5)
          System.out.println(i);
      }

      // Test Case 3 F
      // Uses limit()

      List<Integer> testCase3Ints = IntStream.range(1, 11).boxed().limit(5).toList();
      for (Integer testCase3Int : testCase3Ints)
      {
        System.out.println(testCase3Int);
      }

      // Test Case 4 I
      // Print the number of people in our class

      System.out.println(classmates.size());

      // Test Case 4 F
      // Source: .stream()
      // Terminal: .count() or .collect(counting());

      long numberOfClassmates = classmates.stream().count();
      System.out.println(numberOfClassmates);
      long numberOfClassmates2 = classmates.stream().collect(counting());
      System.out.println(numberOfClassmates2);

      // Test Case 5 I
      // Does anyone in class think hotdogs are sandwiches?

      boolean doesAnyoneThinkHotdogsAreSandwiches = false;

      for (Java401Person classmate : classmates)
      {
        if (classmate.areHotDogsSandwiches)
        {
          doesAnyoneThinkHotdogsAreSandwiches = true;
          break;
        }
      }

      System.out.println("Does anyone in class think hotdogs are sandwiches? " + doesAnyoneThinkHotdogsAreSandwiches);

      // Test Case 5 F

      //Java401Person sandwichPerson1 = classmates.stream().filter((classmate) -> {return classmate.areHotDogsSandwiches == true;}).findAny().orElse(null);
      //Java401Person sandwichPerson1 = classmates.stream().filter((classmate) -> classmate.areHotDogsSandwiches == true).findFirst().orElse(null);
      //Java401Person sandwichPerson1 = classmates.stream().filter((classmate) -> classmate.areHotDogsSandwiches == true).findAny().orElse(null);
      //List<Java401Person> sandwichPeople = classmates.stream().filter((classmate) -> classmate.areHotDogsSandwiches == true).toList();
      boolean isThereASandwichPerson = classmates.stream().anyMatch(c -> c.areHotDogsSandwiches == true);

      //System.out.println("Does anyone in class think hotdogs are sandwiches? " + (sandwichPerson1 != null));
      System.out.println("Does anyone in class think hotdogs are sandwiches? " + isThereASandwichPerson);

      // Test Case 6 I
      // Does everyone in this class work hard?

      boolean doesEveryoneInThisClassWorkHard = true;

      for (Java401Person classmate : classmates)
      {
        if (!classmate.isHardWorker)
        {
          doesEveryoneInThisClassWorkHard = false;
          break;
        }
      }

      System.out.println("Does everyone in this class work hard? " + doesEveryoneInThisClassWorkHard);

      // Test Case 6 F

      boolean isAnyoneNotAHardWorker = classmates.stream().anyMatch(c -> !c.isHardWorker);

      System.out.println("Does everyone in this class work hard? " + !isAnyoneNotAHardWorker);

      boolean isEveryoneAHardWorker = classmates.stream().allMatch(c -> c.isHardWorker);

      System.out.println("Does everyone in this class work hard? " + isEveryoneAHardWorker);

      // Test Case 7 I
      // Print out the average of all of our years of experience

      int totalYearsOfExperience = 0;
      for (Java401Person classmate : classmates)
      {
        totalYearsOfExperience += classmate.yearsOfExperience;
      }

      System.out.println("What is our average years of experience? " + (double) totalYearsOfExperience / (double) classmates.size());

      // Test Case 7 F

      // If you just want to do the sum, use summingInt()
      double averageYearsOfExperience = classmates.stream().collect(Collectors.averagingDouble(c -> c.yearsOfExperience));
      System.out.println("What is our average years of experience? " + averageYearsOfExperience);

      // Test Case 8 I

      // Print out how many people think hot dogs are sandwiches

      int numOfPeopleThatThinkHotDogsAreSandwiches = 0;
      int numOfPeopleThatThinkHotDogsAreNotSandwiches = 0;

      for (Java401Person classmate : classmates)
      {
        if (classmate.areHotDogsSandwiches)
        {
          numOfPeopleThatThinkHotDogsAreSandwiches++;
        }
        else
        {
          numOfPeopleThatThinkHotDogsAreNotSandwiches++;
        }
      }

      System.out.println("Num of people that think hot dogs are sandwiches: " + numOfPeopleThatThinkHotDogsAreSandwiches);
      System.out.println("Num of people that think hot dogs are not sandwiches: " + numOfPeopleThatThinkHotDogsAreNotSandwiches);

      // Test Case 8 F

      Map<Object, List<Java401Person>> hotdogSandwichMap = classmates.stream().collect(groupingBy(c -> c.areHotDogsSandwiches));
      System.out.println("HotdogSandwichMap: " + hotdogSandwichMap);

      // Test Case 9 I
      // Print out all our names in alphabetical order, ascending

      /*Comparator<Java401Person> classmateComparator = new Comparator<>() {

        @Override
        public int compare(Java401Person jp1, Java401Person jp2) {
          return jp1.firstName.compareTo(jp2.firstName);
        }
      };*/

      //Comparator<Java401Person> classmateComparator = (jp1, jp2) -> jp1.firstName.compareTo(jp2.firstName);

      Comparator<Java401Person> classmateComparator = Comparator.comparing(jp -> jp.firstName);

      // Don't want to mutate classmates!
      //Collections.sort(classmates, classmateComparator);

      for(Java401Person classmate : classmates)
      {
        System.out.println(classmate.firstName);
      }

      // Test Case 9 F

      List<Java401Person> sortedClassmates = classmates.stream().sorted(classmateComparator).toList();
      //List<String> classmateSortedNames = classmates.stream().sorted(classmateComparator).map(c -> c.firstName).toList();

      for(Java401Person classmate : sortedClassmates)
      {
        System.out.println(classmate.firstName);
      }

      // Test Case 10 I
      // Print out all our names, separated by semicolons

      String allClassmateNames = "";

      for (Java401Person classmate : classmates)
      {
        allClassmateNames += classmate.firstName + "; ";
      }

      System.out.println(allClassmateNames);

      // Test Case 10 F

      String allClassmateNames2 = classmates.stream().map(c -> c.firstName).collect(joining("; "));
      //String allClassmateNames2 = classmates.stream().map(c -> c.firstName + "; ").collect(joining());

      System.out.println(allClassmateNames2);

      System.out.println(" ******* CURRENT TEST ******* ");

      // Test Case 11 I
      // Print all of our distinct hobbies

      HashSet<String> distinctHobbies = new HashSet<>();

      for(Java401Person classmate : classmates)
      {
        distinctHobbies.add(classmate.getHobby());
      }

      System.out.println(distinctHobbies);

      // Test Case 11 F

      // Using a method reference to be fancy! It's Java401Person::getHobby
      List<String> distinctHobbies2 = classmates.stream().map(Java401Person::getHobby).distinct().toList();

      System.out.println(distinctHobbies2);
    }
}
