/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package moreUnicorns;

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class App {
  public String getGreeting() {
      return "Hello World!";
  }

  public static void main(String[] args) throws IOException
  {
    System.out.println(new App().getGreeting());
    Unicorn edicorn = new Unicorn("black", 0, new Power("breathing fire", "gouts of flame into the sky"));
    Unicorn kevincorn = new Unicorn("navy", 1.5, new Power("coding", "coding at the speed of light"));
    Unicorn benicorn = new Unicorn("rainbow", 1.0, new Power("flying", "I'm flying wheee"));
    Unicorn joshicorn = new Unicorn("teal", 2.0, new Power("shooting stars!", "I'm a shooting star / Across the midnight sky"));
    Unicorn shanacorn = new Unicorn("blue", 3.0, new Power("teleportation", "spooky action at a distance"));
    Unicorn tonycorn = new Unicorn("green", 1.0, new Power("time travel", "like in that Palm Springs movie"));
    Unicorn jallowcorn = new Unicorn("red", 5.0, new Power("flying", "my flying is way cooler than that other unicorn"));
    Unicorn robbicorn = new Unicorn("lavender", 1.0, new Power( "calligraphy", "I'm an Asian unicorn"));
    Unicorn jaybeeicorn = new Unicorn("salmon", 0, new Power("horn envy", "my rage is hotter than 1000 suns"));

    Unicorn[] unicornArray = new Unicorn[9];
    unicornArray[0] = edicorn;
    unicornArray[1] = kevincorn;
    unicornArray[2] = benicorn;
    unicornArray[3] = joshicorn;
    unicornArray[4] = shanacorn;
    unicornArray[5] = tonycorn;
    unicornArray[6] = jallowcorn;
    unicornArray[7] = robbicorn;
    unicornArray[8] = jaybeeicorn;

    List<Unicorn> unicornArrayList = Arrays.asList(unicornArray);

    Gson gson = new GsonBuilder().setPrettyPrinting().create();
    String jallowcornJson = gson.toJson(jallowcorn);
    System.out.println(jallowcornJson);

    // 1 unicorn

    File jsonFile = new File("./app/src/main/resources/jallowcorn.json");

    try(FileWriter jsonFileWriter = new FileWriter(jsonFile))  // try-with-resources
    {
      jsonFileWriter.write(jallowcornJson);
      //jsonFileWriter.close();  // this is important, but try-with-resources above does the same thing, so it's unnecessary
    }
    FileReader jsonFileReader = new FileReader(jsonFile);

    Unicorn jallowcornFromJsonFile = gson.fromJson(jsonFileReader, Unicorn.class);

    System.out.println("Jallowcorn from file: " + jallowcornFromJsonFile);

    // Many unicorns

    //String unicornsJson = gson.toJson(unicornArray);
    String unicornsJson = gson.toJson(unicornArray);
    System.out.println(Arrays.toString(unicornArray));

    File unicornsJsonFile = new File("./app/src/main/resources/unicorns.json");

    try(FileWriter jsonFileWriter = new FileWriter(unicornsJsonFile))  // try-with-resources
    {
      jsonFileWriter.write(unicornsJson);
    }

    FileReader unicornsJsonFileReader = new FileReader(unicornsJsonFile);

    //Unicorn[] unicornsFromJsonFile = gson.fromJson(unicornsJsonFileReader, Unicorn[].class);
    List<Unicorn> unicornsFromJsonFile = gson.fromJson(unicornsJsonFileReader, ArrayList.class);  // hmmm, weren't able to give this a good class type

    //System.out.println("Unicorns from file: " + Arrays.toString(unicornsFromJsonFile));
    System.out.println("Unicorns from ArrayList file: " + unicornsFromJsonFile);
  }
}
