/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package maps;

import java.util.*;

public class App {
  protected String getGreeting() {
      return "Hello World!";
  }

  public static void main(String[] args) {
    System.out.println(new App().getGreeting());

    ArrayList<String> studentsAnsweringList = new ArrayList<>();
    studentsAnsweringList.add("Tony");
    studentsAnsweringList.add("Robb");
    studentsAnsweringList.add("Shane");
    studentsAnsweringList.add("Shane");
    ArrayList<String> uniqueStudentsAnsweringList = new ArrayList<>();
    System.out.println("Students answering: " + studentsAnsweringList);

    // Method 1: not using HashMap / HashSet
    // This is O(n^2)! Don't do this in practice
    for(String student : studentsAnsweringList)
    {
      /*boolean isStudentUnique = true;
      for(String uniqueStudent : uniqueStudentsAnsweringList)
      {
        if (student.equals(uniqueStudent))
          isStudentUnique = false;
      }

      if (isStudentUnique)
        uniqueStudentsAnsweringList.add(student);*/

      if (!uniqueStudentsAnsweringList.contains(student))
        uniqueStudentsAnsweringList.add(student);
    }

    System.out.println("Unique students answering: " + uniqueStudentsAnsweringList);

    // Method2: Using HashSet

    Set<String> uniqueStudentsAnsweringSet = new LinkedHashSet<>();  // Use LinkedHashSet to preserve insert order!
    List<String> efficientUniqueStudentsList = new ArrayList<>();
    for (String student : studentsAnsweringList)
    {
      if (!uniqueStudentsAnsweringSet.contains(student))  // O(1)
      {
        efficientUniqueStudentsList.add(student);
        uniqueStudentsAnsweringSet.add(student);
      }

    }

    // This way works too
    //uniqueStudentsAnsweringSet.addAll(studentsAnsweringList);

    //System.out.println("Unique students answering, second version: " + uniqueStudentsAnsweringSet);
    System.out.println("Unique students answering, second version with list: " + efficientUniqueStudentsList);

    Map<String, Integer> familyFeudPieMap = new LinkedHashMap<>();  // Use LinkedHashMap to preserve insert ordering!

    String[] familyFeudPies = {"Blackberry", "Strawberry / Rhubarb", "Shepard", "Raspberry", "Pumpkin", "Choco Peanut Butter", "Chicken Pot Pie", "Strawberry / Rhubarb"};

    for (String familyFeudPie : familyFeudPies)
    {
      if (familyFeudPieMap.containsKey(familyFeudPie))
      {
        int numOfTimes = familyFeudPieMap.get(familyFeudPie);  // O(1)
        familyFeudPieMap.put(familyFeudPie, numOfTimes + 1); // O(1)
      }
      else
      {
        familyFeudPieMap.put(familyFeudPie, 1);
      }
    }

    System.out.println("Family feud pie amounts: " + familyFeudPieMap);

    java.util.Date testUtilDate = new java.util.Date();
    java.sql.Date testSqlDate = new java.sql.Date(4L);
  }
}
